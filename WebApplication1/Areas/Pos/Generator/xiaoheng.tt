<#@ template debug="true" hostspecific="true" language="C#" #>  
<#@ assembly name="System.Data" #>  
<#@ assembly name="System.xml" #>  
<#@ import namespace="System.Collections.Generic" #>  
<#@ import namespace="System.Data" #>  
<#@ assembly name="System.Core" #>  
<#@ import namespace="System.Linq" #>  
<#@ assembly name="Npgsql.dll" #>
<#@ import namespace="Npgsql"#>  
<#@ assembly name="Dapper.dll" #>
<#@ import namespace="Dapper"#> 

<#@ template language="C#" hostspecific="True"#>  
<#@include file="Manager.ttinclude"#>  
<# var manager = Manager.Create(Host, GenerationEnvironment); #> 

<# 
	ModelManager mmanager = new ModelManager();
	string tableName="product";
	DataTable tables = mmanager.GetTable();
	string solutionsPath = Host.ResolveAssemblyReference("$(SolutionDir)");  
	string projectPath = Host.ResolveAssemblyReference("$(ProjectDir)");  
    foreach (DataRow item in tables.Rows)
    {
		string tablename=item["tableName"].ToString();
		DataTable fields= mmanager.GetColumn(tablename);
		manager.StartNewFile(projectPath+"\\Areas\\Pos\\Models\\"+tablename+".cs"); 
		//manager.StartNewFile(tablename+".cs"); 
#>  
/* ****************************************************************************************
 * 版权所有：吴海龙
 * 用    途：数据传输对象(DTO)
 * 结构组成：
 * 作    者：吴海龙
 * 创建日期：<#=DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")#> 
 * 历史记录：
 * ****************************************************************************************
 * 修改人员：             
 * 修改日期：
 * 修改说明：
 * ****************************************************************************************/
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace xiaoheng.pos.Model
{
   
    /// <summary>
    /// <#= item["tableName"].ToString() #>
    /// </summary>
    public class <#= item["tableName"].ToString() #>
    {
        #region 属性
    <#
    foreach(DataRow row in fields.Rows)
    {
    #>
	/// <summary>
		/// name：row["field"].ToString()
		/// type：row["type"].ToString()
		/// </summary>
        public <#=mmanager.TransFromSqlType(row["type"].ToString(),"")#> <#=mmanager.FixField(row["field"].ToString())#> { get; set; }
    <#}
    #>
    #endregion
    }
}


<#   
	}
	manager.EndBlock();  
	manager.Process(true); 
#>

<#+
    public class ModelManager
    {
        /// <summary>
        /// 数据库连接字符串
        /// </summary>
        private const string CONNECTION_STRING= "server=127.0.0.1;Port=5432;Database=postgres;uid=postgres;pwd=wozuishuai;Encoding=UNICODE";
        /// <summary>
        /// 用户信息表名
        /// </summary>
        private const string PERSONINFO_TABLE_NAME = "tbOptAuthor";
        /// <summary>
        /// 根据表名查询表结构信息
        /// SQL Server 2005写法
        /// </summary>
        private const string GET_TABLE = @" SELECT
											tablename
										FROM
											pg_tables
										WHERE
											tablename NOT LIKE 'pg%'
										AND tablename NOT LIKE 'sql_%'
										ORDER BY
											tablename;";


        /// <summary>
        /// 根据表名查询表结构信息
        /// SQL Server 2000写法
        /// </summary>
        private const string GET_COLUMN = @"SELECT
											A .attnum,
											A .attname AS field,
											T .typname AS TYPE,
											A .attlen AS LENGTH,
											A .atttypmod AS lengthvar,
											A .attnotnull AS NOTNULL
										FROM
											pg_class C,
											pg_attribute A,
											pg_type T
										WHERE
											C .relname = 'product'
										AND A .attnum > 0
										AND A .attrelid = C .oid
										AND A .atttypid = T .oid";
		/// <summary>
        /// 
        /// </summary>
        /// <param name="tableName"></param>
        public DataTable Query(string sql,string tableName)
        {
			
            DataTable dt;
            using (NpgsqlConnection con = GetConnection())
            {
                con.Open();
                NpgsqlCommand cmd = con.CreateCommand();
                cmd.CommandText = string.Format(sql,tableName);
                cmd.CommandType = CommandType.Text;

                NpgsqlDataAdapter adapter = new NpgsqlDataAdapter(cmd);
                DataSet ds = new DataSet(); 
                adapter.Fill(ds);
                dt = ds.Tables[0];
            }
            return dt;
        }

		public DataTable GetTable()
        {
            return Query(GET_TABLE,"获取数据库中的表");
        }

		

		public DataTable GetColumn(string tableName){
			
			//System.Diagnostics.Debugger.Launch();  
			//string sql= string.Format(GET_COLUMN,tableName);
			return Query(GET_COLUMN,"获取指定表的结构");
		}

        /// <summary>
        /// 获得数据连接
        /// </summary>
        /// <returns></returns>
        private NpgsqlConnection GetConnection()
        {
            return new NpgsqlConnection(CONNECTION_STRING);
        }
        /// <summary>
        /// 释放连接
        /// </summary>
        /// <param name="con"></param>
        private void ReleaseConnection(NpgsqlConnection con)
        {
            if (con != null)
            {
                if (con.State == ConnectionState.Open)
                {
                    con.Close();
                }
            }
        }

		///
		public string FixField(string field){
			return field.Substring(0,1).ToUpper()+field.Substring(1);
		}
       
	    public string FixAttr(string field){
			return "_"+field;
		}
        /// <summary>
        /// SQL
        /// </summary>
        /// <param name="type"></param>
        /// <returns></returns>
        public string TransFromSqlType(string type,string isNull)
        {
            string typeStr="";
            switch (type)        //数据库的数据类型转换为对应的C#的数据类型，不是很完整
            {
                case "int2":
					typeStr="int";
					break;
				case "int4":
					typeStr="int";
					break;
				case "int8":
					typeStr="int";
					break;
				case "float4":
					typeStr="float";
					break;
				case "float8":
					typeStr="float";
					break;
				case "bool":
					typeStr="bool";
					break;
				case "char":
					typeStr="char";
					break;
				case "numeric":
					typeStr="decimal";
					break;
				case "varchar":
					typeStr="string";
					break;
				case "date":
					typeStr="DateTime";
					break;
                default:
					typeStr ="not define"+type;
                    break;
            }
			return typeStr;
        }
    }
#>
